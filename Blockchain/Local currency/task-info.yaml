type: edu
custom_name: stage6
files:
- name: src/blockchain/Main.java
  visible: true
  text: |+
    package blockchain;
    import java.security.MessageDigest;
    import java.util.*;
    import java.util.concurrent.*;
    import java.util.stream.Collectors;

    class Block {
        Integer id;
        String minerId = "";
        String regulateN = "";
        long timeStamp;
        String previousHash;
        String hash;
        String magicNumber;
        long blockGenTime = 0;
        static List<String> messages = new ArrayList<>();


        public void setMinerId() {
            this.minerId = minerId;
        }

        public void setRegulateN() {
            this.regulateN = regulateN;
        }

        public List<String> getMessages() {
            return messages;
        }

        public void setMessages(List<String> messages) {
            this.messages = messages;
        }

        public long getBlockGenTime() {
            return blockGenTime;
        }
        public void setBlockGenTime(long blockGenTime) {
            this.blockGenTime = blockGenTime;
        }

        public String getMagicNumber() {
            return magicNumber;
        }
        public void setMagicNumber(String magicNumber) {
            this.magicNumber = magicNumber;
        }
        public Block() {}
        public Integer getId() {
            return id;
        }
        public void setId(Integer id) {
            this.id = id;
        }
        public long getTimeStamp() {
            return timeStamp;
        }
        public void setTimeStamp(long timeStamp) {
            this.timeStamp = timeStamp;
        }
        public String getPreviousHash() {
            return previousHash;
        }
        public void setPreviousHash(String previousHash) {
            this.previousHash = previousHash;
        }
        public String getHash() {
            return hash;
        }
        public void setHash(String hash) {
            this.hash = hash;
        }

        @Override
        public String toString() {
            return "Block{" +
                    "id=" + id +
                    ", minerId='" + minerId + '\'' +
                    ", regulateN='" + regulateN + '\'' +
                    ", timeStamp=" + timeStamp +
                    ", previousHash='" + previousHash + '\'' +
                    ", hash='" + hash + '\'' +
                    ", magicNumber='" + magicNumber + '\'' +
                    ", blockGenTime=" + blockGenTime +
                    ", messages=" + messages +
                    '}';
        }
    }

    class   Blockchain {
        static Block block;
    //    static String regulateN = "";
    //    static String minerId = "";
        static int howManyZero = 0;
        static String tmpHowManyZero = "0".repeat(howManyZero);
        static String hashFromFields;
        static String prevHash = "0";
        static int tmpId = 0;
        static int tmpRandom = 0;
        static String tmpHash = "";
        static long tmpGenTime = 0;
        static List<String> tempMessages  = new ArrayList<>();

        public static List<String> getTempMessages() {
            return tempMessages;
        }

        public static void setTempMessages(List<String> tempMessages) {
            Blockchain.tempMessages = tempMessages;
        }

        public static void addMessage(String message) {
            tempMessages.add(message);
        }

        public synchronized static Block genBlockChain() {
                if (block == null) {
                    long start = System.nanoTime();
                    block = new Block();
                    do {
                        tmpRandom = new Random().nextInt(999999999);
                        hashFromFields = String.valueOf(new Date().getTime()) + prevHash + String.valueOf(tmpRandom) + String.valueOf(tmpRandom);
                        tmpHash = StringUtil.applySha256(hashFromFields);
                    } while (!tmpHash.startsWith(tmpHowManyZero));
                    block.setId(tmpId);
                    block.setMagicNumber(String.valueOf(tmpRandom));
                    tmpId++;
                    block.setTimeStamp(new Date().getTime());
                    block.setPreviousHash(prevHash);
                    block.setHash(tmpHash);
                    prevHash = tmpHash;
                    long end = System.nanoTime();
                    tmpGenTime = (end - start) / 1_000_000_000;
                    block.setBlockGenTime(tmpGenTime);
                    return block;
                } else {
                    long start = System.nanoTime();
                    block = new Block();
                    do {
                        tmpRandom = new Random().nextInt(999999);
                        hashFromFields = String.valueOf(new Date().getTime()) + prevHash + String.valueOf(tmpRandom) + String.valueOf(tmpRandom);
                        tmpHash = StringUtil.applySha256(hashFromFields);
                    } while (!tmpHash.startsWith(tmpHowManyZero));

                    block.setId(tmpId);
                    block.setMagicNumber(String.valueOf(tmpRandom));
                    tmpId++;
                    block.setTimeStamp(new Date().getTime());
                    block.setPreviousHash(prevHash);
                    block.setHash(tmpHash);
                    prevHash = tmpHash;
                    long end = System.nanoTime();
                    tmpGenTime = (end - start) / 1_000_000_000;
                    block.setBlockGenTime(tmpGenTime);
                    return block;
                }
            }


        public  boolean validateBlockChain(List<Block> blockList) {
            for (int i = 1; i < blockList.size(); i++) {
                if (blockList.get(i).previousHash == blockList.get(i - 1).hash) {
                    return  true;
                }
            }
            return false;
        }
    }



    class StringUtil {
        /* Applies Sha256 to a string and returns a hash. */
        public static String applySha256(String input){
            try {
                MessageDigest digest = MessageDigest.getInstance("SHA-256");
                /* Applies sha256 to our input */
                byte[] hash = digest.digest(input.getBytes("UTF-8"));
                StringBuilder hexString = new StringBuilder();
                for (byte elem: hash) {
                    String hex = Integer.toHexString(0xff & elem);
                    if(hex.length() == 1) hexString.append('0');
                    hexString.append(hex);
                }
                return hexString.toString();
            }
            catch(Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

    public class Main {
        public static void main(String[] args) throws InterruptedException, ExecutionException {

            Set<Callable<Block>> callables = new HashSet<Callable<Block>>();
            Client clientOne = new Client("Tom: Whats goin on?");
            Client clientTwo = new Client("Rachel: Who nows:))");
            Client clientThree = new Client("Tom: Ok lets ask wiki :))");
            Client clientFour = new Client("Rachel: Good idea LOL :))");


            ExecutorService executorService = Executors.newFixedThreadPool(4);
            Callable blockchainGen1 = () -> {
                long threadId = Thread.currentThread().getId();
                Block block = new Blockchain().genBlockChain();

    //            Blockchain.addMessage(clientOne.getSendMessage());

                block.minerId = "Created by miner # " + threadId;

                if (block.blockGenTime < 5) {
                    ++Blockchain.howManyZero;
                    block.regulateN = "N was increased to " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 60) {
                    --Blockchain.howManyZero;
                    block.regulateN = "N was decreased by " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 5 && block.blockGenTime < 60){
                    block.regulateN = "N stays the same";
                }

    //            block.messages.addAll(Blockchain.tempMessages);
    //            Blockchain.tempMessages.clear();

                return block;
            };
            callables.add(blockchainGen1);
            Callable blockchainGen2 = () -> {
                long threadId = Thread.currentThread().getId();
                Block block = new Blockchain().genBlockChain();

                Blockchain.addMessage(clientOne.getSendMessage());

                block.minerId = "Created by miner # " + threadId;
                if (block.blockGenTime < 5) {
                    ++Blockchain.howManyZero;
                    block.regulateN = "N was increased to " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 60) {
                    --Blockchain.howManyZero;
                    block.regulateN = "N was decreased by " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 5 && block.blockGenTime < 60){
                    block.regulateN = "N stays the same";
                }

                block.messages.addAll(Blockchain.tempMessages);
                Blockchain.tempMessages.clear();
                return block;
            };
            callables.add(blockchainGen2);
            Callable blockchainGen3 = () -> {
                long threadId = Thread.currentThread().getId();
                Block block = new Blockchain().genBlockChain();

                Blockchain.addMessage(clientTwo.getSendMessage());

                block.minerId = "Created by miner # " + threadId;
                if (block.blockGenTime < 5) {
                    ++Blockchain.howManyZero;
                    block.regulateN = "N was increased to " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 60) {
                    --Blockchain.howManyZero;
                    block.regulateN = "N was decreased by " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 5 && block.blockGenTime < 60){
                    block.regulateN = "N stays the same";
                }

                block.messages.addAll(Blockchain.tempMessages);
                Blockchain.tempMessages.clear();
                return block;
            };
            callables.add(blockchainGen3);
            Callable blockchainGen4 = () -> {
                long threadId = Thread.currentThread().getId();
                Block block = new Blockchain().genBlockChain();

                Blockchain.addMessage(clientThree.getSendMessage());

                block.minerId = "Created by miner # " + threadId;
                if (block.blockGenTime < 5) {
                    ++Blockchain.howManyZero;
                    block.regulateN = "N was increased to " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 60) {
                    --Blockchain.howManyZero;
                    block.regulateN = "N was decreased by " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 5 && block.blockGenTime < 60){
                    block.regulateN = "N stays the same";
                }

                block.messages.addAll(Blockchain.tempMessages);
                Blockchain.tempMessages.clear();

                return block;
            };
            callables.add(blockchainGen4);
            Callable blockchainGen5 = () -> {
                long threadId = Thread.currentThread().getId();
                Block block = new Blockchain().genBlockChain();

                Blockchain.addMessage(clientFour.getSendMessage());

                block.minerId = "Created by miner # " + threadId;
                if (block.blockGenTime < 5) {
                    ++Blockchain.howManyZero;
                    block.regulateN = "N was increased to " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 60) {
                    --Blockchain.howManyZero;
                    block.regulateN = "N was decreased by " + Blockchain.howManyZero;
                } else if (block.blockGenTime > 5 && block.blockGenTime < 60){
                    block.regulateN = "N stays the same";
                }

                block.messages.addAll(Blockchain.tempMessages);
                Blockchain.tempMessages.clear();

                return block;
            };
            callables.add(blockchainGen5);

            //---------------Testing InvokeAny()------------------
    //        Block result = executorService.invokeAny(callables);
    //
    //        System.out.println("result = " + result.previousHash);
            //---------------------------------------------------


            Future<Block> blockGen1 = executorService.submit(blockchainGen1);
            Future<Block> blockGen2 = executorService.submit(blockchainGen2);
            Future<Block> blockGen3 = executorService.submit(blockchainGen2);
            Future<Block> blockGen4 = executorService.submit(blockchainGen4);
            Future<Block> blockGen5 = executorService.submit(blockchainGen5);




            List<Block> blockList = new ArrayList<>();

    //        Scanner scanner = new Scanner(System.in);
    //        Blockchain.howManyZero = scanner.nextInt();
    //        System.out.println("Enter how many zeros the hash must start with: " + Blockchain.howManyZero);

    //        blockList.add(new Blockchain().genBlockChain());
    //        blockList.add(new Blockchain().genBlockChain());
    //        blockList.add(new Blockchain().genBlockChain());
    //        blockList.add(new Blockchain().genBlockChain());
    //        blockList.add(new Blockchain().genBlockChain());
    //        blockList.add(new Blockchain().genBlockChain());
            blockList.add(blockGen1.get());
            blockList.add(blockGen2.get());
            blockList.add(blockGen3.get());
            blockList.add(blockGen4.get());
            blockList.add(blockGen5.get());


           List<Block> sortedBlocks = blockList.stream().sorted(Comparator.comparing(Block::getId)).collect(Collectors.toList());


    //        for (int i = 0; i < blockList.size(); i++) {
            for (int i = 0; i < sortedBlocks.size(); i++) {
                System.out.println("Block:");
                System.out.println(sortedBlocks.get(i).minerId);
                System.out.println("Id:" + "  " + sortedBlocks.get(i).getId());
                System.out.println("Timestamp:"  + sortedBlocks.get(i).getTimeStamp());
                System.out.println("Magic number:"  + sortedBlocks.get(i).getMagicNumber());
                System.out.println("Hash of the previous block:");
                System.out.println(sortedBlocks.get(i).getPreviousHash());
                System.out.println("Hash of the block:");
                System.out.println(sortedBlocks.get(i).getHash());
                if (sortedBlocks.get(i).getId() == 0) {
                    System.out.println("Block data: no messages");
                } else {
                    System.out.println("Block data:");
                    sortedBlocks.get(i).messages.stream()
                            .forEach(System.out::println);
                }

                System.out.println("Block was generating for " + sortedBlocks.get(i).blockGenTime + " seconds");
                System.out.println(sortedBlocks.get(i).regulateN);
                System.out.println("\n");
            }
            executorService.shutdown();
        }
    }


  learner_created: false
- name: test/BlockchainTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;
    import java.util.stream.Collectors;


    class BlockParseException extends Exception {
        BlockParseException(String msg) {
            super(msg);
        }
    }


    class Block {

        int id;
        long timestamp;
        long magic;
        String hashprev;
        String hash;

        static Block parseBlock(String strBlock) throws BlockParseException {
            if (strBlock.length() == 0) {
                return null;
            }

            if (!(strBlock.contains("Block:")
                && strBlock.contains("Timestamp:"))) {

                return null;
            }

            Block block = new Block();

            List<String> lines = strBlock
                .lines()
                .map(String::strip)
                .filter(e -> e.length() > 0)
                .collect(Collectors.toList());

            if (lines.size() < 13) {
                throw new BlockParseException("Every block should " +
                    "contain at least 13 lines of data");
            }

            if (!lines.get(0).equals("Block:")) {
                throw new BlockParseException("First line of every block " +
                    "should be \"Block:\"");
            }

            if (!lines.get(1).startsWith("Created by")) {
                throw new BlockParseException("Second line of every block " +
                    "should start with \"Created by\"");
            }

            if (!lines.get(2).contains("gets 100 VC")) {
                throw new BlockParseException("Third line of every block " +
                    "should contain \"gets 100 VC\"");
            }

            if (!lines.get(3).startsWith("Id:")) {
                throw new BlockParseException("4-th line of every block " +
                    "should start with \"Id:\"");
            }

            String id = lines.get(3).split(":")[1]
                .strip().replace("-", "");
            boolean isNumeric = id.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Id should be a number");
            }

            block.id = Integer.parseInt(id);



            if (!lines.get(4).startsWith("Timestamp:")) {
                throw new BlockParseException("5-th line of every block " +
                    "should start with \"Timestamp:\"");
            }

            String timestamp = lines.get(4).split(":")[1]
                .strip().replace("-", "");
            isNumeric = timestamp.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Timestamp should be a number");
            }

            block.timestamp = Long.parseLong(timestamp);


            if (!lines.get(5).startsWith("Magic number:")) {
                throw new BlockParseException("6-th line of every block " +
                    "should start with \"Magic number:\"");
            }

            String magic = lines.get(5).split(":")[1]
                .strip().replace("-", "");
            isNumeric = magic.chars().allMatch(Character::isDigit);

            if (!isNumeric) {
                throw new BlockParseException("Magic number should be a number");
            }

            block.magic = Long.parseLong(magic);



            if (!lines.get(6).equals("Hash of the previous block:")) {
                throw new BlockParseException("7-th line of every block " +
                    "should be \"Hash of the previous block:\"");
            }

            if (!lines.get(8).equals("Hash of the block:")) {
                throw new BlockParseException("9-th line of every block " +
                    "should be \"Hash of the block:\"");
            }

            String prevhash = lines.get(7).strip();
            String hash = lines.get(9).strip();

            if (!(prevhash.length() == 64 || prevhash.equals("0"))
                || !(hash.length() == 64)) {

                throw new BlockParseException("Hash length should " +
                    "be equal to 64 except \"0\"");
            }

            block.hash = hash;
            block.hashprev = prevhash;

            if (!lines.get(10).startsWith("Block data:")) {
                throw new BlockParseException("11-th line of every block " +
                    "should start with \"Block data:\"");
            }

            return block;
        }


        static List<Block> parseBlocks(String output) throws BlockParseException {
            String[] strBlocks = output.split("\n\n");

            List<Block> blocks = new ArrayList<>();

            for (String strBlock : strBlocks) {
                Block block = parseBlock(strBlock.strip());
                if (block != null) {
                    blocks.add(block);
                }
            }

            return blocks;
        }
    }

    class Clue {
        String zeros;
        Clue(int n) {
            zeros = "0".repeat(n);
        }
    }


    public class BlockchainTest extends StageTest<Clue> {

        List<String> previousOutputs = new ArrayList<>();

        @Override
        public List<TestCase<Clue>> generate() {
            return List.of(
                new TestCase<>(),
                new TestCase<>()
            );
        }

        @Override
        public CheckResult check(String reply, Clue clue) {

            if (previousOutputs.contains(reply)) {
                return new CheckResult(false,
                    "You already printed this text in the previous tests");
            }

            previousOutputs.add(reply);

            List<Block> blocks;
            try {
                blocks = Block.parseBlocks(reply);
            } catch (BlockParseException ex) {
                return new CheckResult(false, ex.getMessage());
            } catch (Exception ex) {
                return CheckResult.wrong("");
            }

            if (blocks.size() != 15) {
                return new CheckResult(false,
                    "In this stage you should output 15 blocks, found " + blocks.size());
            }

            for (int i = 1; i < blocks.size(); i++) {
                Block curr = blocks.get(i - 1);
                Block next = blocks.get(i);

                if (curr.id + 1 != next.id) {
                    return new CheckResult(false,
                        "Id`s of blocks should increase by 1");
                }

                if (next.timestamp < curr.timestamp) {
                    return new CheckResult(false,
                        "Timestamp`s of blocks should increase");
                }

                if (!next.hashprev.equals(curr.hash)) {
                    return new CheckResult(false, "Two hashes aren't equal, " +
                        "but should");
                }
            }


            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/blockchain/Message.java
  visible: true
  learner_created: true
- name: src/blockchain/VerifyMessage.java
  visible: true
  learner_created: true
- name: src/blockchain/GenerateKeys.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5418#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sat, 09 Jul 2022 20:54:13 UTC
record: -1
